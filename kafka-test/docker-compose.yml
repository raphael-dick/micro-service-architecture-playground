version: '3.7'

networks:
  kafka-network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /tmp/kafka-logs
      KAFKA_BROKER_ID: 1
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network

  microservice-1:
    build:
      context: ./apps/microservice-1
    container_name: microservice-1
    environment:
      KAFKA_BROKERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-network

  # if we use multiple replicas of the same services we need multiple partitions for the kafka topic, however then we loose the ensured order of the messages
  # if we need mutliple instances wee nedd to use a fan-out principle, where we have one distributor that consumes the topic and then sends the messages
  # to the different instances
  
  # microservice-2:
  #   build:
  #     context: ./apps/microservice-1
  #   container_name: microservice-2
  #   environment:
  #     KAFKA_BROKERS: kafka:9092
  #   depends_on:
  #     - kafka
  #   networks:
  #     - kafka-network

